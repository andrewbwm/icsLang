/*
 * Copyright 2020 icsLang contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

include "org.mal-lang.coreLang/coreLang.mal"
include "ics/Controller.mal"
include "ics/ControlServer.mal"
include "ics/DataHistorian.mal"
include "ics/EngineeringWorkstation.mal"
include "ics/HMI.mal"
include "ics/IOServer.mal"
include "ics/SIS.mal"

category ComputeResources {

    asset IcsSystem extends System
      user info: "An ICS System extends the coreLang's System with more attack vectors."
      developer info: "For example, the attacker can additionally peform ATT&CK ICS T847 'Replication Through Removable Media', T862 'Supply Chain Attack' and more."
    {
      | connect @Override
        +>  supplyChainAttack

      | physicalAccess @Override
        +>  replicationThroughRemovableMedia,
            moduleFirmware,
            systemFirmware

      | fullAccess @Override
        +>  lossOfSafety,
            lossOfControl,
            lossOfAvailability

      & replicationThroughRemovableMedia [HardAndUncertain]
        user info: "An adversary can get access by copying malware to removable media which is inserted into the control systems environment."
        developer info: "MITRE ATT&CK ICS T847."
        modeler info: "The probability fucntion and its value is just an estimation!"
        ->  bypassAccessControl

      # disallowRemovableMedia
        user info: "Mitigation for MITRE ATT&CK ICS T847."
        developer info: "Mitigation was inspired by Sotirios."
        ->  replicationThroughRemovableMedia

      & supplyChainAttack [VeryHardAndUncertain]
        user info: "Adversaries may perform supply chain compromise to gain control systems environment access by means of infected products, software, and workflows."
        developer info: "MITRE ATT&CK ICS T862."
        modeler info: "The probability fucntion and its value is just an estimation!"
        ->  bypassAccessControl

      # supplyChainAuditing
        user info: "Auditing inside the supply chain can detect possible supply chain attacks. Mitigation for MITRE ATT&CK ICS T862."
        developer info: "Mitigation was inspired by Sotirios."
        ->  supplyChainAttack

      & moduleFirmware
        user info: "Adversaries may install malicious or vulnerable firmware onto modular hardware devices. Control system devices often contain modular hardware devices."
        developer info: "MITRE ATT&CK ICS T839."
        ->  bypassAccessControl

      # moduleFirmwareVerification
        user info: "Verify the module's firmwares from the main firmware upon boot-up or during normal operation. Mitigation for MITRE ATT&CK ICS T839."
        developer info: "Mitigation was vaguely listed on MITRE ATT&CK ICS."
        ->  moduleFirmware

      # useCryptographyKeyForFirmware
        user info: "If a cryptographic key is used for firmware updates, the firmware will be harder to be altered. Mitigation for MITRE ATT&CK ICS T839 and T857."
        developer info: "Mitigation was listed on MITRE ATT&CK ICS."
        ->  moduleFirmware,
            systemFirmware

      # useAuthenticatedFirmwareUpdates
        user info: "If authentication of the source and data is performed, malicious firmware alteration will be significantly harder. Mitigation for MITRE ATT&CK ICS T839 and T857."
        developer info: "Mitigation was listed on MITRE ATT&CK ICS."
        ->  moduleFirmware,
            systemFirmware

      & systemFirmware
        user info: "An adversary may exploit the firmware update feature on accessible devices to upload malicious or out-of-date firmware."
        developer info: "MITRE ATT&CK ICS T857."
        ->  bypassAccessControl

      | deny @Override {A}
        +>  lossOfAvailability

      // Impact attack steps
      | lossOfSafety
        user info: "Adversaries may cause loss of safety whether on purpose or as a consequence of actions taken to accomplish an operation."
        developer info: "MITRE ATT&CK ICS T880."
        ->  damageToProperty

      | damageToProperty {A}
        user info: "Adversaries may cause damage and destruction of property to infrastructure, equipment, and the surrounding environment when attacking control systems."
        developer info: "MITRE ATT&CK ICS T879."
        ->  lossOfProductivityAndRevenue

      | lossOfControl {I}
        user info: "Adversaries may seek to achieve a sustained loss of control or a runaway condition in which operators cannot issue any commands even if the malicious interference has subsided."
        developer info: "MITRE ATT&CK ICS T827."
        ->  damageToProperty

      | lossOfAvailability {A}
        user info: "Adversaries may attempt to disrupt essential components or systems to prevent owner and operator from delivering products or services."
        developer info: "MITRE ATT&CK ICS T826."

      | lossOfProductivityAndRevenue
        user info: "Adversaries may cause loss of productivity and revenue through disruption and even damage to the availability and integrity of control system operations, devices, and related processes."
        developer info: "MITRE ATT&CK ICS T828."

    }

     asset IcsApplication extends Application
      user info: "An ICS Application extends the coreLang's Application with OT attack vectors."
    {
      & specificAccess @Override
        +>  normalOperation

      | fullAccess @Override
        +>  normalOperation,
            attemptManipulation

      | normalOperation
        user info: "The state where the operational component is operating normaly or seems to be operating normaly (but is undetectably manipulated within the safety limits)."
        developer info: "I am not sure if we need this. But I keep it to add one more vector that we can model! (Sotirios)"
        ->  attemptManipulation

      | restrictedOperation {I,A}
        user info: "When the operational component is compromised, the operation of it is affected."

      | read @Override {C}
        +>  theftOfOperationalInformation

      | deny @Override {A}
        +>  denialOfControl,
            denialOfView,
            lossOfControl,
            lossOfView,
            lossOfAvailability

      & attemptManipulation [HardAndUncertain]
        user info: "If an applicaiton is operating normaly it could even be the case that it is elaborately manipulated by an adversary."
        ->  manipulationOfControl,
            manipulationOfView

      // Control related attack steps (Impact)
      | denialOfControl {A}
        user info: "Adversaries may cause a denial of control to temporarily prevent operators and engineers from interacting with process controls."
        developer info: "MITRE ATT&CK ICS T813."
        ->  restrictedOperation,
            transmittedSignal.blockSignal

      | manipulationOfControl {I,A}
        user info: "Adversaries may manipulate control systems devices or possibly leverage their own, to communicate with and command physical control processes."
        developer info: "MITRE ATT&CK ICS T831."
        ->  restrictedOperation,
            transmittedSignal.manipulateSignal

      | lossOfControl {I}
        user info: "Adversaries may seek to achieve a sustained loss of control or a runaway condition in which operators cannot issue any commands even if the malicious interference has subsided."
        developer info: "MITRE ATT&CK ICS T827."
        ->  damageToProperty

      // View related attack steps (Impact)
      | manipulationOfView {I}
        user info: "Adversaries may attempt to manipulate the information reported back to operators or controllers."
        developer info: "MITRE ATT&CK ICS T832."
        ->  restrictedOperation,
            transmittedSignal.manipulateSignal

      | denialOfView {I}
        user info: "Adversaries may cause a denial of view in attempt to disrupt and prevent operator oversight on the status of an ICS environment."
        developer info: "MITRE ATT&CK ICS T815."
        ->  restrictedOperation,
            transmittedSignal.blockSignal

      | lossOfView {I}
        user info: "Adversaries may cause a sustained or permanent loss of view where the ICS equipment will require local, hands-on operator intervention."
        developer info: "MITRE ATT&CK ICS T829."
        ->  restrictedOperation

      // Other types of Impact
      | theftOfOperationalInformation {C}
        user info: "Adversaries may steal operational information on a production environment as a direct mission outcome for personal gain or to inform future operations."
        developer info: "MITRE ATT&CK ICS T882."

      | damageToProperty {A}
        user info: "Adversaries may cause damage and destruction of property to infrastructure, equipment, and the surrounding environment when attacking control systems."
        developer info: "MITRE ATT&CK ICS T879."
        ->  lossOfProductivityAndRevenue

      | lossOfAvailability {A}
        user info: "Adversaries may attempt to disrupt essential components or systems to prevent owner and operator from delivering products or services."
        developer info: "MITRE ATT&CK ICS T826."

      | lossOfProductivityAndRevenue
        user info: "Adversaries may cause loss of productivity and revenue through disruption and even damage to the availability and integrity of control system operations, devices, and related processes."
        developer info: "MITRE ATT&CK ICS T828."
    }

    asset Sensor
      user info: "An object that generates data (via a signal) but may not have any associated software or host."
      modeler info: "It would be vulnerable to an attacker that can gain physical access to it."
    {
      | physicalAccess
        user info: "Attacker has physical access on the location where the sensor is physically deployed."
        ->  signal.manipulateSignal,
            signal.blockSignal
    }

    asset Actuator
      user info: "An object that consumes data (from a signal) but may not have any associated software or host."
    {
      | manipulate {I}
        user info: "If the signal that is consumed by this actuator is manipulated then the actuator is also manipulated."
        developer info: "This will lead to loss of control on the associated system."
        ->  system.lossOfControl

      | block {A}
        user info: "If the signal that is consumed by this actuator is blocked then the actuator is also blocked."
        developer info: "This will lead to loss of control and loss of availability on the associated system."
        ->  system.lossOfControl,
            system.lossOfAvailability
    }

    asset SynchronizationModule
      user info: "This asset represents any component that provides synchronization capabilities, as for example a GPS receiver or a network-based synchronization module."
    {
      | compromise
        ->  manipulateClockFrequency,
            manipulateTime,
            stopClock

      | manipulateClockFrequency
        ->  synchronizedApp.manipulationOfControl,
            synchronizedApp.manipulationOfView

      | manipulateTime
        ->  synchronizedApp.manipulationOfControl,
            synchronizedApp.manipulationOfView

      | stopClock
        ->  synchronizedApp.denialOfControl,
            synchronizedApp.denialOfView
    }

  }

  category DataResources {

    asset Signal
      user info: "A signal represents a command that is sent between two assets but the medium over which is transmitted is not relevant to the model."
      modeler info: "In the case where data or information are transmitted over a known medium, the Data asset and the DataInTransit association should be used instead."
      developer info: "The basic attack steps of this asset were inspired by the attack steps of the data asset in coreLang."
    {
      // Basic attack steps below
      | attemptAccess
          user info: "Attempt to access the data, this might fail if the 'dataNotPresent' defense is used."
          ->  access

        & access
          user info: "Access the data."
          ->  attemptRead,
              attemptWrite,
              attemptDelete

        !E dataEncrypted @hidden
          user info: "If the data are encrypted then accessing them requires the associated encryption credentials/key."
          developer info: "Data will be considered as encrypted if there is at least one Credentials instance associated with it. Otherwise, 'accessUnencryptedData' is reached."
          <-  encryptCreds
          ->  accessUnencryptedData

        # authenticated
          user info: "If the data are authenticated, then modifying them is not possible to achieve."
          ->  write

        & accessUnencryptedData
          user info: "If data is unencrypted then access them."
          ->  accessDecryptedData

        | accessDecryptedData @hidden
          user info: "Intermediate attack step to only allow effects of 'accessUnencryptedData' on data after compromising the encryption credentials or encryption is disabled."
          ->  access,
              readContainedInformationAndData,
              read,
              write,
              delete

        # dataNotPresent
          user info: "It should be used to model the probability of data actually not existing on the connected container (i.e. System, Application, Connection, etc.)."
          developer info: "This attack step is in series with the 'accessUnencryptedData' attack step because there is no reason to defend encrypted data if they do not exist..."
          ->  accessUnencryptedData

        & readContainedInformationAndData
          user info: "From the data, attempt to access also the contained information/data, if exists."
          ->  information.attemptAccess,
              containedData.attemptAccess

        | attemptRead
          user info: "Attempt to read the data."
          ->  read

        | attemptWrite
          user info: "Attempt to write on the data."
          ->  write

        | attemptDelete
           user info: "Attempt to delete the data."
          -> delete

        & read {C}
          user info: "The attacker can read the data."
          ->  containedData.attemptRead,
              readContainedInformationAndData

        & write {I}
          user info: "The attacker can write to the location of the data, effectively deleting it."
          ->  containedData.attemptWrite,
              attemptDelete

        & delete {I,A}
          user info: "The attacker can delete the data."
          ->  containedData.attemptDelete
        
        // STPA-SafeSec related attack steps (Those four need to be differentiated somehow)
        | applyControlSignalTooEarly
          ->  signalDestApp.manipulationOfControl

        | applyControlSignalTooLate
          ->  signalDestApp.manipulationOfControl

        | applyControlSignalTooLong
          ->  signalDestApp.manipulationOfControl

        | applyControlSignalNotLongEnough
          ->  signalDestApp.manipulationOfControl

        | manipulateSignal
          user info: "When an attacker sends a false or manipulated signal."
          ->  applyControlSignalTooLong,
              applyControlSignalTooLate,
              applyControlSignalTooEarly,
              applyControlSignalNotLongEnough,
              signalActuator.manipulate,
              signalDestApp.manipulationOfView

        | blockSignal
          user info: "When an attacker block a signal from being sent/received."
          ->  signalActuator.block,
              signalDestApp.denialOfControl,
              signalDestApp.lossOfControl,
              signalDestApp.lossOfView,
              signalDestApp.denialOfView
    }
  }

associations {
  IcsApplication [signalSourceApp]    * <-- AppTransmittedSignal  --> *     [transmittedSignal] Signal
      user info: "Any ics application can transmit a signal."
  IcsApplication [signalDestApp]      * <-- AppReceivedSignal     --> *     [receivedSignal] Signal
      user info: "Any ics application can receive/consume a signal."
  Sensor         [signalSensor]       * <-- SensorSignal          --> *     [signal]         Signal
      user info: "Any sensor can be associated with a signal over which it can send data."
  Actuator       [signalActuator]     * <-- ActuatorSignal        --> *     [signal]         Signal
      user info: "An actuator can be associated with a signal from which it receives data/commands."
  Actuator       [sysActuator]        * <-- AcuatorBelongsTo      --> *     [system]         IcsSystem
      user info: "An actuator can be associated with a system on which it actuates."
  IcsApplication [synchronizedApp]    * <-- SynchronizationModule --> 0..1  [synchronizationModule]    SynchronizationModule
      user info: "Any ics application can have one synchronization module to provide synchronization on the signals sent."
  Signal         [encryptedSignal]    * <-- EncryptionCredentials --> 0..1  [encryptCreds]   Credentials
      user info: "Encrypted signal can be associated with the relevant encryption credentials."
  Signal         [containerSignal]    * <-- DataContainment       --> *     [containedData]  Data
      user info: "Data can be contained inside a signal."
  Signal         [containerSignal]    * <-- InfoContainment       --> *     [information]    Information
      user info: "A signal can contain information."
}
